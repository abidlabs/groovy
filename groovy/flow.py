import os
from collections.abc import Generator
from typing import Callable, Sequence, Union

import gradio as gr


class Flow:
    """
    The core class in Groovy. A Flow consists of:
    * A task to run (string or format string)
    * A set of input components (optional)
    * A function that accepts a task string and yields an arbitrary number of `str`, `PIL.Image`, or `gr.ChatMessage` responses.

    After instantiating a Flow, you can call .launch() to launch the flow in a Gradio app.
    """

    def __init__(
        self,
        task: str,
        inputs: Sequence[gr.Component] | None = None,
        stream_fn: Callable[[str], Generator[Union[str, gr.ChatMessage], None, None]]
        | None = None,
    ):
        """
        Parameters:
            task: The task to run. Can be a regular string or a format string, in which case the input components' values will be passed to it.
            inputs: The input components whose values will be passed to the task, if it's a format string.
            stream_fn: The generator function that accepts a task string and yields an arbitrary number of `str`, `PIL.Image`, or `gr.ChatMessage` responses. If not provided, the default streamer (which browses the web to complete a task) will be used.
        """
        # Import here to speed up the import time of the groovy module
        from groovy.agent import browser_agent_streamer

        self.task = task
        self.inputs = inputs or []
        self.stream_fn = stream_fn or browser_agent_streamer

    def launch(
        self,
        save_recording: bool = False,
        run_immediately: bool = False,
        **kwargs,
    ):
        """
        Launches the flow in a Gradio app.

        Parameters:
            save_recording: If True, collects any images generated by the flow and saves them as a gif in the working directory.
            run_immediately: Whether to run the task immediately at .launch() or whether to wait for the user to click the "Run" button in the Gradio app.
            kwargs: Additional keyword arguments to pass to the Gradio app's launch() method.
        """
        # Import here to speed up the import time of the groovy module
        from groovy.app import create_app

        self.save_recording = save_recording
        self.app = create_app(
            self,
            self.inputs,
            self.task,
            self.stream_fn,
            run_immediately,
            self.save_recording,
        )
        _, self.url, _ = self.app.launch(inline=False, inbrowser=True)
        return self.url

    def to_json(self) -> dict:
        data = {
            "task": self.task,
            "inputs": [input_comp.get_config() for input_comp in self.inputs],
        }
        return data

    @staticmethod
    def component_from_config(config: dict) -> gr.Component:
        cls = gr.utils.component_or_layout_class(config.pop("name"))
        constructor_args = cls.recover_kwargs(config)
        return cls(**constructor_args)

    @classmethod
    def from_json(cls, data: dict):
        return cls(
            task=data["task"],
            inputs=[
                cls.component_from_config(input_config)
                for input_config in data["inputs"]
            ],
        )
